
    printf("\nLSFRS initial states:\n");
    print_lsfr(lsfr_1, 1, 19);
    print_lsfr(lsfr_2, 2, 22);
    print_lsfr(lsfr_3, 3, 23);

    for (int i = 63; i >= 0; i--)
    {
        short sk_b = llu_bit(session_key, i - 1);
        short l1_b = sk_b ^ int_bit(lsfr_1, 18) ^ int_bit(lsfr_1, 17) ^ int_bit(lsfr_1, 16) ^ int_bit(lsfr_1, 13);
        short l2_b = sk_b ^ int_bit(lsfr_2, 20) ^ int_bit(lsfr_2, 21);
        short l3_b = sk_b ^ int_bit(lsfr_3, 7) ^ int_bit(lsfr_3, 20) ^ int_bit(lsfr_3, 21) ^ int_bit(lsfr_3, 22);
        lsfr_1 = (lsfr_1 << 1) | l1_b;
        lsfr_2 = (lsfr_2 << 1) | l2_b;
        lsfr_3 = (lsfr_3 << 1) | l3_b;
    }
    printf("\nLSFRS state after adding session_key - 64 cycles:\n");
    printf("Session Key:\t");
    print_binary(session_key, 64);
    print_lsfr(lsfr_1, 1, 19);
    print_lsfr(lsfr_2, 2, 22);
    print_lsfr(lsfr_3, 3, 23);

    for (int i = 21; i >= 0; i--)
    {
        short fc_b = llu_bit(frame_counter, i - 1);
        short l1_b = fc_b ^ int_bit(lsfr_1, 18) ^ int_bit(lsfr_1, 17) ^ int_bit(lsfr_1, 16) ^ int_bit(lsfr_1, 13);
        short l2_b = fc_b ^ int_bit(lsfr_2, 20) ^ int_bit(lsfr_2, 21);
        short l3_b = fc_b ^ int_bit(lsfr_3, 7) ^ int_bit(lsfr_3, 20) ^ int_bit(lsfr_3, 21) ^ int_bit(lsfr_3, 22);
        lsfr_1 = (lsfr_1 << 1) | l1_b;
        lsfr_2 = (lsfr_2 << 1) | l2_b;
        lsfr_3 = (lsfr_3 << 1) | l3_b;
    }
    printf("\nLSFRS state after frame_counter - 22 cycles:\n");
    printf("Session Key:\t");
    print_binary(frame_counter, 22);
    print_lsfr(lsfr_1, 1, 19);
    print_lsfr(lsfr_2, 2, 22);
    print_lsfr(lsfr_3, 3, 23);

    for (int i = 100; i > 0; i--)
    {
        int maj = (int_bit(lsfr_1, 8) + int_bit(lsfr_2, 10) + int_bit(lsfr_3, 10)) >= 2 ? 1 : 0;
        short l1_b = int_bit(lsfr_1, 18) ^ int_bit(lsfr_1, 17) ^ int_bit(lsfr_1, 16) ^ int_bit(lsfr_1, 13);
        short l2_b = int_bit(lsfr_2, 20) ^ int_bit(lsfr_2, 21);
        short l3_b = int_bit(lsfr_3, 7) ^ int_bit(lsfr_3, 20) ^ int_bit(lsfr_3, 21) ^ int_bit(lsfr_3, 22);
        if (int_bit(lsfr_1, 8) == maj)
            lsfr_1 = (lsfr_1 << 1) | l1_b;
        if (int_bit(lsfr_2, 8) == maj)
            lsfr_2 = (lsfr_2 << 1) | l2_b;
        if (int_bit(lsfr_3, 8) == maj)
            lsfr_3 = (lsfr_3 << 1) | l3_b;
    }
    printf("\nLSFRS state initializing the register - 100 cycles:\n");
    printf("Session Key:\t");
    print_binary(frame_counter, 22);
    print_lsfr(lsfr_1, 1, 19);
    print_lsfr(lsfr_2, 2, 22);
    print_lsfr(lsfr_3, 3, 23);

    char message[] = "salut cest moi";
    printf("%s\n", message);
    for (int i = 0; i < 15; i++)
    {
        int maj = (int_bit(lsfr_1, 8) + int_bit(lsfr_2, 10) + int_bit(lsfr_3, 10)) >= 2 ? 1 : 0;

        if (int_bit(lsfr_1, 8) == maj)
            lsfr_1 =
                (lsfr_1 << 1) | (int_bit(lsfr_1, 18) ^ int_bit(lsfr_1, 17) ^ int_bit(lsfr_1, 16) ^ int_bit(lsfr_1, 13));

        if (int_bit(lsfr_2, 10) == maj)
            lsfr_2 = (lsfr_2 << 1) | (int_bit(lsfr_2, 20) ^ int_bit(lsfr_2, 21));

        if (int_bit(lsfr_3, 10) == maj)
            lsfr_3 =
                (lsfr_3 << 1) | (int_bit(lsfr_3, 7) ^ int_bit(lsfr_3, 20) ^ int_bit(lsfr_3, 21) ^ int_bit(lsfr_3, 22));
        message[i] ^= (int_bit(lsfr_1, 18) ^ int_bit(lsfr_2, 21) ^ int_bit(lsfr_3, 22));
    }
    printf("%s\n", message);



















    #include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define MAX_ULL 18446744073709551615ULL;

typedef struct LSFR
{
    int l1;
    int l2;
    int l3;
} LSFR;

void print_binary(unsigned long long int n, int size)
{
    for (int i = size - 1; i >= 0; i--)
    {
        printf("%llu%c", (n >> i) & 1, i % 8 == 0 ? ' ' : '\0');
    }
    printf("");
}

void print_lsfr(int n, char lsfr_id, int size)
{
    // int delta = 32 - size;
    printf("LSFR_%d (%d bits):\t", lsfr_id, size);
    for (int i = 0; i < size; i++)
    {
        printf("%d%c", (n >> i) & 1, (i + 1) % 4 == 0 ? ' ' : '\0');
    }
    printf("\n");
}

short i_bit(int num, int position)
{
    return (num >> position) & 1;
}

short llu_bit(unsigned long long int num, int position)
{
    return (num >> position) & 1;
}

short xor_l1(int lsfr)
{
    return i_bit(lsfr, 18) ^ i_bit(lsfr, 17) ^ i_bit(lsfr, 16) ^ i_bit(lsfr, 13);
}
short xor_l2(int lsfr)
{
    return i_bit(lsfr, 20) ^ i_bit(lsfr, 21);
}
short xor_l3(int lsfr)
{
    return i_bit(lsfr, 7) ^ i_bit(lsfr, 20) ^ i_bit(lsfr, 21) ^ i_bit(lsfr, 22);
}

LSFR initialize_registers(unsigned long long session_key, int frame_counter)
{
    LSFR l = {
        .l1 = 0,
        .l2 = 0,
        .l3 = 0,
    };
    for (int i = 63; i >= 0; i--)
    {
        short sk_b = llu_bit(session_key, i - 1);
        l.l1 = (l.l1 << 1) | (sk_b ^ xor_l1(l.l1));
        l.l2 = (l.l2 << 1) | (sk_b ^ xor_l2(l.l2));
        l.l3 = (l.l3 << 1) | (sk_b ^ xor_l3(l.l3));
    }
    for (int i = 21; i >= 0; i--)
    {
        short fc_b = llu_bit(frame_counter, i - 1);
        l.l1 = (l.l1 << 1) | (fc_b ^ xor_l1(l.l1));
        l.l2 = (l.l2 << 1) | (fc_b ^ xor_l2(l.l2));
        l.l3 = (l.l3 << 1) | (fc_b ^ xor_l3(l.l3));
    }
    for (int i = 100; i > 0; i--)
    {
        int maj = (i_bit(l.l1, 8) + i_bit(l.l2, 10) + i_bit(l.l3, 10)) >= 2 ? 1 : 0;
        if (i_bit(l.l1, 8) == maj)
            l.l1 = (l.l1 << 1) | xor_l1(l.l1);
        if (i_bit(l.l2, 8) == maj)
            l.l2 = (l.l2 << 1) | xor_l2(l.l2);
        if (i_bit(l.l3, 8) == maj)
            l.l3 = (l.l3 << 1) | xor_l3(l.l3);
    }
    return l;
}

char *xor_message(LSFR lsfr, char *message, int length)
{
    char *xor_msg = malloc(length + 1);
    if (!xor_msg)
        return NULL;

    for (int i = 0; i < length; i++)
    {
        char buffer = 0;
        for (int j = 0; j < 8; j++)
        {
            int maj = (i_bit(lsfr.l1, 8) + i_bit(lsfr.l2, 10) + i_bit(lsfr.l3, 10)) >= 2 ? 1 : 0;
            if (i_bit(lsfr.l1, 8) == maj)
                lsfr.l1 = (lsfr.l1 << 1) | xor_l1(lsfr.l1);
            if (i_bit(lsfr.l2, 10) == maj)
                lsfr.l2 = (lsfr.l2 << 1) | xor_l1(lsfr.l2);
            if (i_bit(lsfr.l3, 10) == maj)
                lsfr.l3 = (lsfr.l3 << 1) | xor_l1(lsfr.l3);

            int temp = xor_l1(lsfr.l1) ^ xor_l1(lsfr.l2) ^ xor_l1(lsfr.l3);
            if (temp == 0)
            {
                buffer &= ~(1 << j);
            }
            else
            {
                buffer |= (1 << j);
            }
        }
        xor_msg[i] = message[i] ^ buffer;
    }
    xor_msg[length] = '\0';
    return xor_msg;
}
int main()
{
    unsigned long long int session_key = 0b0100111000101111010011010111110000011110101110001000101100111010;
    int frame_counter = 0b1110101011001111001011;
    LSFR lsfr = initialize_registers(session_key, frame_counter);

    char message[] = "Salut c'est Paul";
    int length = 0;
    while (message[length] != '\0')
        length++;

    printf("\nOriginal message:\n\t%s\n", message);
    printf("Original binary:\n\t");
    for (int i = 0; i < length; i++)
    {
        print_binary(message[i], 8);
    }

    char *encrypted_message = xor_message(lsfr, message, length);
    printf("\nEncrypted message:\n\t%s\n", encrypted_message);

    printf("\nEncrypted binary:\n\t");
    for (int i = 0; i < length; i++)
    {
        print_binary(encrypted_message[i], 8);
    }

    lsfr = initialize_registers(session_key, frame_counter);
    char *decrypted_message = xor_message(lsfr, encrypted_message, length);
    printf("\nDecrypted message:\n\t%s\n", decrypted_message);
    return 0;
}




































        mpz_t flag;
        mpz_init(flag);
        mpz_add_ui(flag, r, -j);
        // gmp_printf("flag:\t%Zd\n", flag);
        for (j = 0; mpz_cmp_ui(flag, j) < 1; j++)
        {
            printf("%d", j);
            mpz_add_ui(flag, r, -j);












#include <gmp.h>
#include <inttypes.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void square_and_multiply(mpz_t result, mpz_t x, mpz_t pow, mpz_t mod)
{
    mpz_set_ui(result, 1);

    mpz_t base, e;
    mpz_init_set(base, x);
    mpz_init_set(e, pow);
    mpz_mod(base, base, mod);

    while (mpz_cmp_d(e, 0) > 0)
    {
        if (mpz_odd_p(e))
        {
            mpz_mul(result, result, base);
            mpz_mod(result, result, mod);
        }
        mpz_fdiv_q_2exp(e, e, 1);
        mpz_mul(base, base, base);
        mpz_mod(base, base, mod);
    }
    mpz_clears(base, e, NULL);
}

int miller_rabin(mpz_t n, int k)
{
    if (mpz_cmp_ui(n, 1) <= 0)
        return 0;
    if (mpz_cmp_ui(n, 2) == 0 || mpz_cmp_ui(n, 3) == 0)
        return 1;
    if (mpz_even_p(n))
        return 0;

    mpz_t d, r;
    mpz_inits(d, r, NULL);
    mpz_sub_ui(d, n, 1);
    mpz_set_ui(r, 0);

    while (mpz_even_p(d))
    {
        mpz_fdiv_q_2exp(d, d, 1);
        mpz_add_ui(r, r, 1);
    }

    gmp_randstate_t state;
    gmp_randinit_mt(state);

    for (int i = 0; i < k; i++)
    {
        mpz_t a, x;
        mpz_inits(a, x, NULL);

        mpz_urandomm(a, state, n);
        mpz_add_ui(a, a, 2);

        square_and_multiply(x, a, d, n);
        if (mpz_cmp_ui(x, 1) == 0 || mpz_cmp(x, n) == 0)
        {
            mpz_clears(a, x, NULL);
            continue;
        }
        for (int j = 0; mpz_cmp_ui(r, j) > 0; j++)
        {
            square_and_multiply(x, x, d, n);
            if (mpz_cmp_ui(x, 1) == 0)
                return 0;
            if (mpz_cmp(x, n - 1) == 0)
                break;
        }
        mpz_clears(a, x, NULL);
    }
    gmp_randclear(state);
    return 1;
}

void generate_prime(mpz_t prime)
{
    int k = 5;
    gmp_randstate_t state;
    gmp_randinit_mt(state);
    gmp_randseed_ui(state, time(NULL));

    mpz_t num;
    mpz_init(num);

    mpz_urandomb(num, state, 512);
    mpz_setbit(num, 511);
    mpz_setbit(num, 0);

    while (!miller_rabin(num, k))
    {
        mpz_add_ui(num, num, 2);
    }
    mpz_set(prime, num);
}

int main()
{
    mpz_t p, g, a, b;
    mpz_inits(p, g, a, b, NULL);
    mpz_set_ui(p, 23);
    mpz_set_ui(g, 5);
    mpz_set_ui(a, 6);
    mpz_set_ui(b, 15);

    mpz_t A, B;
    mpz_inits(A, B, NULL);

    square_and_multiply(A, g, a, p);
    square_and_multiply(B, g, b, p);

    gmp_printf("Alice:\t%Zd\n", a);
    gmp_printf("Bob:\t%Zd\n", b);

    gmp_printf("Public Alice:\t%Zd\n", A);
    gmp_printf("Public Bob:\t%Zd\n", B);

    mpz_t secret_Alice, secret_Bob;
    mpz_init(secret_Alice);
    mpz_init(secret_Bob);
    square_and_multiply(secret_Alice, B, a, p);
    square_and_multiply(secret_Bob, A, b, p);

    gmp_printf("Alice secret:\t%Zd\n", secret_Alice);
    gmp_printf("Bob secret:\t%Zd\n", secret_Bob);

    mpz_t n;
    mpz_init(n);
    for (int j = 0; j < 100; j++)
    {
        mpz_set_ui(n, j);
        printf("%d:%d\n", miller_rabin(n, 10), j);
    }
    // mpz_t z;
    // mpz_init(z);
    // // generate_prime(n);
    // mpz_set_str(z,
    //             "733546588834386296813028528884258194147999773077645405190120332944050836799294530383545800813801653097"
    //             "0254318172965357391199557120543758438497838095839321",
    //             0);
    // gmp_printf("z secret:\t%Zd\n", z);
    // printf("%d\n", miller_rabin(z, 10000));
    // if (miller_rabin(n, 100000))
    // {
    //     printf("%" PRIu64 " est probablement premier.\n", n);
    // }
    // else
    // {
    //     printf("%llu est composé.\n", n);
    // }
    return 0;
}